Debian 10

***Install Python3***

sudo apt update && sudo apt upgrade 

sudo apt install wget build-essential libreadline-gplv2-dev libncursesw5-dev \
     libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev libffi-dev zlib1g-dev



2. wget https://www.python.org/ftp/python/3.9.13/Python-3.9.13.tgz

3. tar xzf Python-3.9.13.tgz

4. cd Python-3.9.13

5. ./configure --enable-optimizations

6.  make altinstall 


FOR FEDORA https://computingforgeeks.com/install-postgresql-13-on-fedora/


***Install Postgress***

1. sudo apt-get install wget ca-certificates

2. sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'

3. wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -

4. sudo apt-get update

5. sudo apt-get install postgresql postgresql-contrib

6. apt show postgresql

7. sudo su - postgres

8. psql 

9. ALTER USER postgres WITH PASSWORD 'new_Password';

10. CREATE DATABASE db_name;


***myproject is project name
++Installing Nginx++

1. sudo apt install nginx

2. Hit Server Ip and you can see nginx Home page
++Configuring uWSGI++

1. (myprojectenv) uwsgi --socket 0.0.0.0:5000 --protocol=http -w wsgi:app 


2. nano ~/myproject/myproject.ini

->
[uwsgi]
module = wsgi:app

master = true
processes = 5

socket = myproject.sock
chmod-socket = 660
vacuum = true

#mount = /=wsgi.py
#manage-script-name = true
#single-interpreter = true

die-on-term = true


+++Creating a systemd Unit File++

1.nano /etc/systemd/system/myproject.service

->
[Unit]
Description=uWSGI instance to serve myproject
After=network.target

[Service]
User=root
Group=root
WorkingDirectory=/var/www/myproject
Environment="PATH=/var/www/myprojectenv/bin"
ExecStart=/var/www/myprojectenv/bin/uwsgi --ini myproject.ini

[Install]
WantedBy=multi-user.target

2.sudo systemctl start myproject
3.sudo systemctl enable myproject
4.sudo systemctl status myproject


**Output
● myproject.service - uWSGI instance to serve myproject
   Loaded: loaded (/etc/systemd/system/myproject.service; enabled; vendor preset
   Active: active (running) since Mon 2021-10-25 22:34:52 UTC; 14s ago
 Main PID: 9391 (uwsgi)
    Tasks: 6 (limit: 1151)
   CGroup: /system.slice/myproject.service
           ├─9391 /home/sammy/myproject/myprojectenv/bin/uwsgi --ini myproject.i
           ├─9410 /home/sammy/myproject/myprojectenv/bin/uwsgi --ini myproject.i
           ├─9411 /home/sammy/myproject/myprojectenv/bin/uwsgi --ini myproject.i
           ├─9412 /home/sammy/myproject/myprojectenv/bin/uwsgi --ini myproject.i
           ├─9413 /home/sammy/myproject/myprojectenv/bin/uwsgi --ini myproject.i
           └─9414 /home/sammy/myproject/myprojectenv/bin/uwsgi --ini myproject.i
If you receive any errors, be sure to resolve them before continuing with the tutorial.


++Configuring Nginx to Proxy Requests++

1.nano /etc/nginx/sites-available/myproject or nano /etc/nginx/sites-available/default

->
server {

        # SSL configuration
        #
        # listen 443 ssl default_server;
        # listen [::]:443 ssl default_server;
        #
        # Note: You should disable gzip for SSL traffic.
        # See: https://bugs.debian.org/773332
        #
        # Read up on ssl_ciphers to ensure a secure configuration.
        # See: https://bugs.debian.org/765782
        #
        # Self signed certs generated by the ssl-cert package
        # Don't use them in a production server!
        #
        # include snippets/snakeoil.conf;

        #root /var/www/html;

        # Add index.php to the list if you are using PHP
        #index index.html index.htm index.nginx-debian.html;

        server_name {domain};

        location / {
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
                # try_files $uri $uri/ =404;
                include uwsgi_params;
                uwsgi_pass unix:/var/www/myproject/myproject.sock;
        }

}

2.nginx -t

3.systemctl restart nginx

4.systemctl status myproject
     
5.sudo chmod 777 -R /var/www/myproject/myproject.sock

Your Flask Api is Deployed at server Ip


++Securing the Application++

6.apt -y install certbot

7.sudo apt install python3-certbot-nginx

8.apt install ufw

9.ufw status

10.ufw allow http

11.ufw allow https

12.ufw allow ssh

13.ufw enable

14.sudo certbot --nginx -d domain

SSL certificated added


##restart.sh

for updating code when git pull will be done

1. nano restart.sh

2.
        systemctl restart myproject;
        systemctl restart nginx;
        sudo chmod 777 /var/www/myproject/myproject.sock;

3. chmod +x restart.sh




virtualenv venv -p=C:\Users\anura\AppData\Local\Microsoft\WindowsApps\python3.9.exe